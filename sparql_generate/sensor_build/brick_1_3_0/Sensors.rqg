prefix nest: <https://www.empa.ch/digital-twin/>
prefix nest_location: <https://www.empa.ch/digital-twin/location/>
prefix nest_equipment: <https://www.empa.ch/digital-twin/equipment/>
prefix nest_point: <https://www.empa.ch/digital-twin/point/>
prefix nest_collection: <https://www.empa.ch/digital-twin/collection/>
prefix brick: <https://brickschema.org/schema/Brick#>
prefix ite: <http://w3id.org/sparql-generate/iter/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ref: <https://brickschema.org/schema/Brick/ref#>

GENERATE {

?aksCode_URI a ?BrickClass_Type;
    brick:hasLocation ?Room_URI;
    brick:isPointOf ?nest_Equipment_URI;
    brick:hasOpcAddress ?opcUaPublic;
    ref:hasExternalReference [
                a ref:TimeseriesReference;
    	        ref:hasTimeseriesId ?Point;
    	        ref:storedAt ?timeseries_address;
    	        ];
    	        .

}

ITERATOR ite:CSV(<./Sensors.csv>, true, '"', ',','\n',

"aksCode_URI",
"Point_URI",
"brick_PointType",
"nest_Equipment_URI",
"Room_URI",
"opcUaPublic"

)

	AS

?aksCode
?Point
?brick_PointType
?nest_Equipment
?Room
?opcUaPublic

WHERE {
    BIND(IRI(CONCAT("https://www.empa.ch/digital-twin/point/",?aksCode)) AS ?aksCode_URI)
    BIND(IRI(CONCAT("https://brickschema.org/schema/Brick#",ENCODE_FOR_URI(?brick_PointType))) AS ?BrickClass_Type)
    BIND(IRI(CONCAT("https://www.empa.ch/digital-twin/location/",ENCODE_FOR_URI(?Room))) AS ?Room_URI)
    BIND(IRI(CONCAT("https://www.empa.ch/digital-twin/equipment/",ENCODE_FOR_URI(?nest_Equipment))) AS ?nest_Equipment_URI)
    BIND(IRI(CONCAT("https://api.nestcloud.ch/nest/data?numericid=", STR(?Point))) AS ?timeseries_address)
}

